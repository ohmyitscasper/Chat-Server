COMS 4119 Chat Server
Programmed in C.

NOTE: The code has been compiled using gcc 4.6, gcc 4.7 as well as clang(standard OSX c compiler). It compiles and runs on all 3.
		THE SERVER AND CLIENT ARE MULTITHREADED USING THE PTHREAD LIBRARY WHICH IS A PART OF THE GNU C LIBRARY

Steps to run:
	1. Type 
			make

		to compile the program
	2. To run the server use:

			./Server <port number>

	3. To run the client use:

			./Client <IP> <port number>

		Note: please use a valid ip address or the connect will fail for the client.
			e.g, ./Client 127.0.0.1 4119

			(localhost doesn't work).

	4. Upon a client connecting to the Server, the server will prompt for a Username right away

	5. After the username is entered, the server will prompt for the password.
	
	6. If the authentication is successful, the server will log the user in.
		The server will send a Welcome message.
	
	7. If not, then the Server will just keep prompting for username and passwords. 
		If 3 or more attempts are made by a user, then the server will block that user. 
	
	8. After the user is logged in, the user can issue the following commands:
		whoelse
		wholasthr
		broadcast <message>
		message <user> <message>
		block <user>
		unblock <user>
		logout


Details of the Code:

Server.c

	- The code for the server is split up into 3 main sections and a bunch of other helper functions.
		1. The main function
		2. The thread function
		3. The Linked List
		
	- The first thing the main function does is read in the file called user_pass.txt
		The usernames and passwords get stored into a

	- The main function is where the socket stuff is initialized and where the Server starts listening for connections.

	- As requests come in to connect to our server, I create a new thread for each connection and to that thread I give the IP address
		of the connection and the file descriptor at which the connection is being attempted. 
		- This is all the main method really does. Just accepting connections and dispatching threads. 
	- The second important part of the program is the thread function which is responsible for communicating with the client. This 
		is broken up into 2 main sections:
			1. Authentication
			2. Commands
		Authentication:
		- I prompt the user at the socket provided for the username
		- I prompt the user at the socket provided for the password
		To authenticate, I have two helper functions which check the username and check the password for the given username. 

		After authenticating the user, if they provide the correct login information, I send a prompt to the server, "Say a command."

		Commands:
		The user is prompted to enter a command and when the client sends a command, there are a bunch of if statements that deal with
			what to do for each command. 

		- The whoelse command sends a query to the linked list, and the linked list returns a list of names with newline characters in betwen. This list is sent to the client. 
			- The internal algorithm just uses 
		- The wholasthr command sends a query to the linked list, and using the last login and last logout times, the linked list returns a list of names. 
		- The broadcast command calls a function in the linked list with a function pointer to the function that will send the broadcast message to the entire list thats online currently.
		- The private messaging commands build a message string, then check if the user is blocked by/has blocked the user that he is trying to message and also does various sanity checks, and finally sends the message to the user. This message, if the receiving user is offline is stored in an online message buffer with a controllable size. The size paramter is in the Server.h file called MAXMESSAGES - it is currently at 10
		- The block/unblock commands check the validity and apply the appropriate blocks using helper functions in the linked list. 
		- logout resets a few of the data structures for the user who is logging out, and then terminates the thread and sends the logoff signal to the client. 

	- I have tried my best to make it memory-leak safe and in the test cases that I've tried, I've gotten 0 memory leaks. In the server, I handle Ctrl-c from a user OR from any client. 
		- When a client hits Ctrl-c, I just kill the thread for that client.
		- When a user hits Ctrl-c in the server, I gracefully tell the Server to reclaim all memory and exit the server. 
	- I haven't faced any behavior thats too unexpected as long as the program is run reasonably close to the specifications. 

	ADDITIONAL FEATURE
	- I'm not sure if this counts as an additional feature, but I've added the feature that allows blocking of ANY username that tries to incorrectly log in 3 times. 
		This feature can be tested by trying to enter any incorrect username/pw combination.


	Debugging purposes:
		For debugging, the server prints out a bunch of simple messages. 



Client.c
	- The code for the client just creates 1 thread, from which to read input from the user and send it to the server and the main thread is used to simply read input from the socket. 
	- When the client sees "Logging off" from the server, it terminates. 
